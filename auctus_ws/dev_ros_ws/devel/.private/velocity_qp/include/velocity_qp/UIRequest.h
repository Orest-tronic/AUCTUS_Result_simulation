// Generated by gencpp from file velocity_qp/UIRequest.msg
// DO NOT EDIT!


#ifndef VELOCITY_QP_MESSAGE_UIREQUEST_H
#define VELOCITY_QP_MESSAGE_UIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace velocity_qp
{
template <class ContainerAllocator>
struct UIRequest_
{
  typedef UIRequest_<ContainerAllocator> Type;

  UIRequest_()
    : play_traj(false)
    , publish_traj(false)
    , build_traj(false)
    , exit_(false)  {
    }
  UIRequest_(const ContainerAllocator& _alloc)
    : play_traj(false)
    , publish_traj(false)
    , build_traj(false)
    , exit_(false)  {
  (void)_alloc;
    }



   typedef uint8_t _play_traj_type;
  _play_traj_type play_traj;

   typedef uint8_t _publish_traj_type;
  _publish_traj_type publish_traj;

   typedef uint8_t _build_traj_type;
  _build_traj_type build_traj;

   typedef uint8_t _exit__type;
  _exit__type exit_;





  typedef boost::shared_ptr< ::velocity_qp::UIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::velocity_qp::UIRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UIRequest_

typedef ::velocity_qp::UIRequest_<std::allocator<void> > UIRequest;

typedef boost::shared_ptr< ::velocity_qp::UIRequest > UIRequestPtr;
typedef boost::shared_ptr< ::velocity_qp::UIRequest const> UIRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::velocity_qp::UIRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::velocity_qp::UIRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::velocity_qp::UIRequest_<ContainerAllocator1> & lhs, const ::velocity_qp::UIRequest_<ContainerAllocator2> & rhs)
{
  return lhs.play_traj == rhs.play_traj &&
    lhs.publish_traj == rhs.publish_traj &&
    lhs.build_traj == rhs.build_traj &&
    lhs.exit_ == rhs.exit_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::velocity_qp::UIRequest_<ContainerAllocator1> & lhs, const ::velocity_qp::UIRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace velocity_qp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::velocity_qp::UIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::velocity_qp::UIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velocity_qp::UIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velocity_qp::UIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velocity_qp::UIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velocity_qp::UIRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::velocity_qp::UIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d91bc99162217c62d1dcd8dc3f3302f0";
  }

  static const char* value(const ::velocity_qp::UIRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd91bc99162217c62ULL;
  static const uint64_t static_value2 = 0xd1dcd8dc3f3302f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::velocity_qp::UIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "velocity_qp/UIRequest";
  }

  static const char* value(const ::velocity_qp::UIRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::velocity_qp::UIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool play_traj\n"
"bool publish_traj \n"
"bool build_traj\n"
"bool exit_\n"
;
  }

  static const char* value(const ::velocity_qp::UIRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::velocity_qp::UIRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.play_traj);
      stream.next(m.publish_traj);
      stream.next(m.build_traj);
      stream.next(m.exit_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UIRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::velocity_qp::UIRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::velocity_qp::UIRequest_<ContainerAllocator>& v)
  {
    s << indent << "play_traj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.play_traj);
    s << indent << "publish_traj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publish_traj);
    s << indent << "build_traj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.build_traj);
    s << indent << "exit_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exit_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VELOCITY_QP_MESSAGE_UIREQUEST_H
